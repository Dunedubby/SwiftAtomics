//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  from gyb_utils import *
}%
${autogenerated_warning()}

#if !ATOMICS_NATIVE_BUILTINS


@_alwaysEmitIntoClient
@_transparent
internal func _atomicMemoryFence(
  ordering: AtomicUpdateOrdering
) {
  switch ordering {
    case .relaxed:
      break
% for (enumOrder, apiOrder, docOrder, llvmOrder, _) in updateOrderings:
%   if enumOrder != "relaxed":
  case .${enumOrder}:
      _sa_thread_fence_${shim_name(llvmOrder)}()
%   end
% end
    default:
      fatalError("Unsupported ordering")
  }
}

% for (storageType, valueType) in cPrimitives:
extension UnsafeMutablePointer where Pointee == ${storageType} {
  /// Atomically loads a word starting at this address with the specified
  /// memory ordering.
  @_semantics("atomics.requires_constant_orderings")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal func _atomicLoad(ordering: AtomicLoadOrdering) -> ${valueType} {
    switch ordering {
% for (enumOrder, apiOrder, docOrder, llvmOrder) in loadOrderings:
    case .${enumOrder}:
      return _sa_load_${shim_name(llvmOrder)}_${valueType}(self)
% end
    default:
      fatalError("Unsupported ordering")
    }
  }

  /// Atomically stores the specified value starting at the memory referenced by
  /// this pointer, with the specified memory ordering.
  @_semantics("atomics.requires_constant_orderings")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal func _atomicStore(
    _ desired: ${valueType},
    ordering: AtomicStoreOrdering
  ) {
    switch ordering {
% for (enumOrder, apiOrder, docOrder, llvmOrder) in storeOrderings:
    case .${enumOrder}:
      _sa_store_${shim_name(llvmOrder)}_${valueType}(self, desired)
% end
    default:
      fatalError("Unsupported ordering")
    }
  }

  /// Atomically stores the specified value starting at the memory referenced by
  /// this pointer, with the specified memory ordering.
  @_semantics("atomics.requires_constant_orderings")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  public func _atomicExchange(
    _ desired: ${valueType},
    ordering: AtomicUpdateOrdering
  ) -> ${valueType} {
    switch ordering {
% for (enumOrder, apiOrder, docOrder, llvmOrder, failOrder) in updateOrderings:
    case .${enumOrder}:
      return _sa_exchange_${shim_name(llvmOrder)}_${valueType}(self, desired)
% end
    default:
      fatalError("Unsupported ordering")
    }
  }

  /// Perform an atomic compare and exchange operation with the specified memory
  /// ordering.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering) { currentValue in
  ///   let original = currentValue
  ///   guard original == expected else { return (false, original) }
  ///   currentValue = desired
  ///   return (true, original)
  /// }
  /// ```
  @_semantics("atomics.requires_constant_orderings")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  public func _atomicCompareExchange(
    expected: ${valueType},
    desired: ${valueType},
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: ${valueType}) {
    var expected = expected
    let exchanged: Bool
    switch ordering {
% for (enumOrder, apiOrder, docOrder, llvmOrder, failOrder) in updateOrderings:
    case .${enumOrder}:
      exchanged = _sa_cmpxchg_strong_${shim_name(llvmOrder)}_${shim_name(failOrder)}_${valueType}(
        self, &expected, desired)
% end
    default:
      fatalError("Unsupported ordering")
    }
    return (exchanged, expected)
  }

  /// Perform an atomic compare and exchange operation with the specified
  /// success/failure memory orderings.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering, failureOrdering) { currentValue in
  ///   let original = currentValue
  ///   guard original == expected else { return (false, original) }
  ///   currentValue = desired
  ///   return (true, original)
  /// }
  /// ```
  ///
  /// The `ordering` argument specifies the memory ordering to use when the
  /// operation manages to update the current value, while `failureOrdering`
  /// will be used when the operation leaves the value intact.
  @_semantics("atomics.requires_constant_orderings")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  public func _atomicCompareExchange(
    expected: ${valueType},
    desired: ${valueType},
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: ${valueType}) {
    // FIXME: LLVM doesn't support arbitrary ordering combinations
    // yet, so upgrade the success ordering when necessary so that it
    // is at least as "strong" as the failure case.
    var expected = expected
    let exchanged: Bool
    switch (successOrdering, failureOrdering) {
% for (swiftSuccess, apiSuccess, _, llvmOrder, _) in updateOrderings:
%   for (swiftFailure, apiFailure, _, llvmFailure) in loadOrderings:
    case (.${swiftSuccess}, .${swiftFailure}):
      exchanged = _sa_cmpxchg_strong_${actualShimOrders(llvmOrder, llvmFailure)}_${valueType}(
        self, &expected, desired)
%   end
% end
    default:
      preconditionFailure("Unsupported orderings")
    }
    return (exchanged, expected)
  }

  /// Perform an atomic compare and exchange operation with the specified
  /// success/failure memory orderings.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering, failureOrdering) { currentValue in
  ///   let original = currentValue
  ///   guard original == expected else { return (false, original) }
  ///   currentValue = desired
  ///   return (true, original)
  /// }
  /// ```
  ///
  /// The `ordering` argument specifies the memory ordering to use when the
  /// operation manages to update the current value, while `failureOrdering`
  /// will be used when the operation leaves the value intact.
  @_semantics("atomics.requires_constant_orderings")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  public func _atomicWeakCompareExchange(
    expected: ${valueType},
    desired: ${valueType},
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: ${valueType}) {
    // FIXME: LLVM doesn't support arbitrary ordering combinations
    // yet, so upgrade the success ordering when necessary so that it
    // is at least as "strong" as the failure case.
    var expected = expected
    let exchanged: Bool
    switch (successOrdering, failureOrdering) {
% for (swiftSuccess, apiSuccess, _, llvmOrder, _) in updateOrderings:
%   for (swiftFailure, apiFailure, _, llvmFailure) in loadOrderings:
    case (.${swiftSuccess}, .${swiftFailure}):
      exchanged = _sa_cmpxchg_weak_${actualShimOrders(llvmOrder, llvmFailure)}_${valueType}(
        self, &expected, desired)
%   end
% end
    default:
      preconditionFailure("Unsupported orderings")
    }
    return (exchanged, expected)
  }

% if valueType != "DoubleWord":
%   for (swiftName, builtinName, operator, label, doc) in integerOperations:
  /// Perform an atomic ${doc} operation and return the new value,
  /// with the specified memory ordering.
  ///
  % if "Wrapping" in swiftName:
  /// - Note: This operation silently wraps around on overflow, like the
  /// `${operator}` operator does on `UInt` values.
  ///
  % end
  /// - Returns: The original value before the operation.
  @_semantics("atomics.requires_constant_orderings")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicLoadThen${swiftName}(
    ${label} operand: ${valueType},
    ordering: AtomicUpdateOrdering
  ) -> ${valueType} {
    switch ordering {
% for (enumOrder, apiOrder, docOrder, llvmOrder, failOrder) in updateOrderings:
    case .${enumOrder}:
      return _sa_fetch_${builtinName}_${shim_name(llvmOrder)}_${valueType}(
        self, operand)
% end
    default:
      preconditionFailure("Unsupported ordering")
    }
  }
%   end
% end
}
% end
#endif // ATOMICS_NATIVE_BUILTINS
